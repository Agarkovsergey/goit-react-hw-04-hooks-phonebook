{"version":3,"sources":["components/contactForm/ContactForm.jsx","components/contactList/ContactList.jsx","components/filter/Filter.jsx","utils/localStorage.helpers.js","App.js","index.js"],"names":["ContactForm","createContact","useState","name","number","state","setState","onInputChange","target","value","onSubmit","e","preventDefault","type","pattern","title","required","onChange","ContactList","contacts","handleDelete","map","id","onClick","Filter","handleChange","filter","CONTACTS_KEY","App","setContacts","localStorage","setItem","JSON","stringify","saveContacts","useEffect","getItem","parse","err","console","error","readContacts","filteredContacts","contact","toLowerCase","includes","className","uuidv4","find","alert","split","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6415684e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nconst ContactForm = ({ createContact }) => {\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    number: '',\r\n  })\r\n\r\n  const onSubmit = (e) => {\r\n      e.preventDefault() \r\n    \r\n    createContact(state);\r\n    setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  }\r\n\r\n  const onInputChange = ({ target }) => {\r\n    setState({\r\n      ...state,\r\n      [target.name]: target.value\r\n    });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={state.name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={onInputChange}\r\n      />\r\n      <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={state.number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={onInputChange}\r\n      />\r\n      <button type='submit'>Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;","import React from 'react';\r\n\r\n\r\n\r\nconst ContactList = ({ contacts, handleDelete }) => (\r\n    <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id}>\r\n                {name}: {number}\r\n                <button type='button' onClick={handleDelete} id={`deletebtn:${id}`}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\n\r\nexport default ContactList;","import React from 'react';\r\n\r\nconst Filter = ({ handleChange, filter }) => (\r\n    <>\r\n        <p>Find cotatcs by name</p>\r\n        <input type='text' onChange={handleChange} value={filter} />\r\n    </>\r\n)\r\n\r\nexport default Filter;","const CONTACTS_KEY = 'contacts';\r\n\r\nexport const saveContacts = (contacts) => {\r\n    localStorage.setItem(CONTACTS_KEY, JSON.stringify(contacts));\r\n}\r\n\r\nexport const readContacts = () => {\r\n  try {\r\n    const contacts = localStorage.getItem(CONTACTS_KEY);\r\n\r\n    return contacts === null ? [] : JSON.parse(contacts);\r\n  } catch (err) {\r\n    console.error('Get state error: ', err);\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid'\n\nimport ContactForm from './components/contactForm/ContactForm'\nimport ContactList from './components/contactList/ContactList'\nimport Filter from './components/filter/Filter'\n\nimport { saveContacts, readContacts } from './utils/localStorage.helpers'\n\n\nconst App = () => {\n  const [state, setState] = useState({\n    contacts: [],\n    filter: ''\n  })\n\n  const setContacts = (contacts) => {\n    setState({\n      contacts\n    });\n    saveContacts(contacts)\n  }\n\n  const createContact = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number\n    }\n\n    const foundContact = state.contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    \n    if (foundContact) {\n      alert(`${name} is already in contacts`);\n      return\n    }\n    \n    setContacts([\n      ...state.contacts,\n      contact\n    ]);\n  }\n\n  const onFilterChange = ({ target }) => {\n    setState({\n      ...state,\n      filter: target.value\n    });\n  }\n\n  const deleteContact = ({ target }) => {\n    const id = target.id.split(':')[1];\n\n    setContacts(\n      state.contacts.filter(\n        contact => contact.id !== id\n      ),\n    );\n  }\n\n  useEffect(() => {\n    const contacts = readContacts();\n    setState({\n      ...state,\n      contacts\n    })\n  }, [])\n  \n  const filteredContacts = state.contacts.filter(\n    contact => contact.name.toLowerCase().includes(state.filter.toLowerCase())\n  );   \n  \n  return (\n    <div className=\"wrapper\">\n      <h2 className=\"lessonHeader\">Phonebook</h2>\n      <ContactForm\n        createContact={createContact}\n      />\n      <h2 className=\"lessonHeader\">Contacts</h2>\n      <Filter handleChange={onFilterChange} filter={state.filter}/>\n      <ContactList contacts={filteredContacts} handleDelete={ deleteContact }/>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}